# Modern Cryptography Project
# Michael Mitchell Student # C00255151
from logging import info
from tornado.escape import json_decode, utf8
from tornado.gen import coroutine
from .base import BaseHandler
import bcrypt
from cryptography.fernet import Fernet

#fernet library is using for encrypting personal data.
class RegistrationHandler(BaseHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.encryption_key = Fernet.generate_key()
        self.fernet = Fernet(self.encryption_key)

    def encrypt(self, value):
        if value is None:
            return None
        return self.fernet.encrypt(value.encode())
#
# Additional Details are captured below
#
    @coroutine
    def post(self):
        try:
            body = json_decode(self.request.body)
            email = body['email'].lower().strip()
            if not isinstance(email, str):
                raise Exception()
            password = body['password']
            if not isinstance(password, str):
                raise Exception()
            display_name = body.get('displayName')
            if display_name is None:
                display_name = email
            if not isinstance(display_name, str):
                raise Exception()
            full_name = body.get('fullName')
            if not isinstance(full_name, str):
                raise Exception()
            address = body.get('address')
            if not isinstance(address, str):
                raise Exception()
            date_of_birth = body.get('dateOfBirth')
            if not isinstance(date_of_birth, str):
                raise Exception()
            phone_number = body.get('phoneNumber')
            if not isinstance(phone_number, str):
                raise Exception()
            disabilities = body.get('disabilities')
            if not isinstance(disabilities, str):
                raise Exception()
        except Exception as e:
            self.send_error(400, message='You must provide an email address, password, display name, full name, address, date of birth, phone number, and disabilities!')
            return

        if not email:
            self.send_error(400, message='The email address is invalid!')
            return

        if not password:
            self.send_error(400, message='The password is invalid!')
            return

        if not display_name:
            self.send_error(400, message='The display name is invalid!')
            return

        user = yield self.db.users.find_one({
          'email': email
        }, {})

        if user is not None:
            self.send_error(409, message='A user with the given email address already exists!')
            return
# This section hashes the password.

        salt = bcrypt.gensalt()
        hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt)
# The Encryption Key Generated by the Fernet Library is stored in the database as a variable "encryptionKey"
        yield self.db.users.insert_one({
            'email': email,
            'password': hashed_password,
            'salt': salt,
            'displayName': self.encrypt(display_name),
            'fullName': self.encrypt(full_name),
            'address': self.encrypt(address),
            'dateOfBirth': self.encrypt(date_of_birth),
            'phoneNumber': self.encrypt(phone_number),
            'disabilities': self.encrypt(disabilities),
            'encryptionKey': self.encryption_key,
        })

        print("Thank you for registering: ", full_name)
        
